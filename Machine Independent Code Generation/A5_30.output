Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | constant
    3                   | STRING_LITERAL
    4                   | LEFT_PAREN expression RIGHT_PAREN

    5 constant: INT_CONSTANT
    6         | CHAR_CONSTANT

    7 postfix_expression: primary_expression
    8                   | postfix_expression LEFT_SQR_BRACKET expression RIGHT_SQR_BRACKET
    9                   | postfix_expression LEFT_PAREN argument_expression_list_opt RIGHT_PAREN
   10                   | postfix_expression DOT IDENTIFIER
   11                   | postfix_expression ARROW IDENTIFIER

   12 argument_expression_list_opt: argument_expression_list
   13                             | %empty

   14 argument_expression_list: assignment_expression
   15                         | argument_expression_list COMMA assignment_expression

   16 unary_expression: postfix_expression
   17                 | unary_operator unary_expression

   18 unary_operator: BITWISE_AND
   19               | MULTIPLY
   20               | ADD
   21               | SUBTRACT
   22               | NOT

   23 multiplicative_expression: unary_expression
   24                          | multiplicative_expression MULTIPLY unary_expression
   25                          | multiplicative_expression DIVIDE unary_expression
   26                          | multiplicative_expression MODULO unary_expression

   27 additive_expression: multiplicative_expression
   28                    | additive_expression ADD multiplicative_expression
   29                    | additive_expression SUBTRACT multiplicative_expression

   30 relational_expression: additive_expression
   31                      | relational_expression LESS_THAN additive_expression
   32                      | relational_expression GREATER_THAN additive_expression
   33                      | relational_expression LESS_THAN_EQUALS additive_expression
   34                      | relational_expression GREATER_THAN_EQUALS additive_expression

   35 equality_expression: relational_expression
   36                    | equality_expression EQUALS relational_expression
   37                    | equality_expression NOT_EQUALS relational_expression

   38 logical_and_expression: equality_expression
   39                       | logical_and_expression LOGICAL_AND M equality_expression

   40 logical_or_expression: logical_and_expression
   41                      | logical_or_expression LOGICAL_OR M logical_and_expression

   42 conditional_expression: logical_or_expression
   43                       | logical_or_expression N QUESTION_MARK M expression N COLON M conditional_expression

   44 M: %empty

   45 N: %empty

   46 assignment_expression: conditional_expression
   47                      | unary_expression assignment_operator assignment_expression

   48 assignment_operator: ASSIGNMENT

   49 expression: assignment_expression

   50 declaration: type_specifier init_declarator SEMICOLON

   51 init_declarator: declarator
   52                | declarator ASSIGNMENT initializer

   53 type_specifier: VOID
   54               | CHAR
   55               | INT

   56 declarator: pointer direct_declarator
   57           | direct_declarator

   58 intermediate_identifier: IDENTIFIER

   59 direct_declarator: IDENTIFIER
   60                  | IDENTIFIER LEFT_SQR_BRACKET INT_CONSTANT RIGHT_SQR_BRACKET
   61                  | intermediate_identifier LEFT_PAREN change_table parameter_list RIGHT_PAREN
   62                  | intermediate_identifier LEFT_PAREN change_table RIGHT_PAREN

   63 pointer: MULTIPLY

   64 parameter_list: parameter_declaration
   65               | parameter_list COMMA parameter_declaration

   66 intermediate_declarator: pointer intermediate_identifier
   67                        | intermediate_identifier

   68 parameter_declaration: type_specifier intermediate_declarator
   69                      | type_specifier

   70 initializer: assignment_expression

   71 statement: compound_statement
   72          | expression_statement
   73          | selection_statement
   74          | iteration_statement
   75          | jump_statement

   76 loop_statement: expression_statement
   77               | selection_statement
   78               | iteration_statement
   79               | jump_statement

   80 compound_statement: LEFT_CURLY_BRACE X change_table block_item_list_opt RIGHT_CURLY_BRACE

   81 block_item_list_opt: block_item_list
   82                    | %empty

   83 block_item_list: block_item
   84                | block_item_list M block_item

   85 block_item: declaration
   86           | statement

   87 expression_statement: expression SEMICOLON
   88                     | SEMICOLON

   89 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement N
   90                    | IF LEFT_PAREN expression N RIGHT_PAREN M statement N ELSE M statement

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

   93 F: %empty

   94 X: %empty

   95 change_table: %empty

   96 jump_statement: RETURN expression SEMICOLON
   97               | RETURN SEMICOLON

   98 translation_unit: external_declaration
   99                 | translation_unit external_declaration

  100 external_declaration: function_definition
  101                     | declaration

  102 function_definition: type_specifier declarator declaration_list_opt change_table LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

  103 declaration_list_opt: declaration_list
  104                     | %empty

  105 declaration_list: declaration
  106                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CHAR (258) 54
    ELSE (259) 90
    FOR (260) 91 92
    IF (261) 89 90
    INT (262) 55
    RETURN (263) 96 97
    VOID (264) 53
    LEFT_SQR_BRACKET (265) 8 60
    RIGHT_SQR_BRACKET (266) 8 60
    LEFT_PAREN (267) 4 9 61 62 89 90 91 92
    RIGHT_PAREN (268) 4 9 61 62 89 90 91 92
    LEFT_CURLY_BRACE (269) 80 92 102
    RIGHT_CURLY_BRACE (270) 80 92 102
    DOT (271) 10
    ARROW (272) 11
    BITWISE_AND (273) 18
    MULTIPLY (274) 19 24 63
    ADD (275) 20 28
    SUBTRACT (276) 21 29
    NOT (277) 22
    DIVIDE (278) 25
    MODULO (279) 26
    LESS_THAN (280) 31
    GREATER_THAN (281) 32
    LESS_THAN_EQUALS (282) 33
    GREATER_THAN_EQUALS (283) 34
    EQUALS (284) 36
    NOT_EQUALS (285) 37
    LOGICAL_AND (286) 39
    LOGICAL_OR (287) 41
    QUESTION_MARK (288) 43
    COLON (289) 43
    SEMICOLON (290) 50 87 88 96 97
    ASSIGNMENT (291) 48 52
    COMMA (292) 15 65
    IDENTIFIER <symptr> (293) 1 10 11 58 59 60
    INT_CONSTANT <intval> (294) 5 60
    CHAR_CONSTANT <charval> (295) 6
    STRING_LITERAL <charval> (296) 3
    THEN (297)


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    primary_expression <expr> (44)
        on left: 1 2 3 4
        on right: 7
    constant <symptr> (45)
        on left: 5 6
        on right: 2
    postfix_expression <arr> (46)
        on left: 7 8 9 10 11
        on right: 8 9 10 11 16
    argument_expression_list_opt <numParams> (47)
        on left: 12 13
        on right: 9
    argument_expression_list <numParams> (48)
        on left: 14 15
        on right: 12 15
    unary_expression <arr> (49)
        on left: 16 17
        on right: 17 23 24 25 26 47
    unary_operator <unaryOp> (50)
        on left: 18 19 20 21 22
        on right: 17
    multiplicative_expression <expr> (51)
        on left: 23 24 25 26
        on right: 24 25 26 27 28 29
    additive_expression <expr> (52)
        on left: 27 28 29
        on right: 28 29 30 31 32 33 34
    relational_expression <expr> (53)
        on left: 30 31 32 33 34
        on right: 31 32 33 34 35 36 37
    equality_expression <expr> (54)
        on left: 35 36 37
        on right: 36 37 38 39
    logical_and_expression <expr> (55)
        on left: 38 39
        on right: 39 40 41
    logical_or_expression <expr> (56)
        on left: 40 41
        on right: 41 42 43
    conditional_expression <expr> (57)
        on left: 42 43
        on right: 43 46
    M <instr> (58)
        on left: 44
        on right: 39 41 43 84 89 90 91 92
    N <stmt> (59)
        on left: 45
        on right: 43 89 90 91 92
    assignment_expression <expr> (60)
        on left: 46 47
        on right: 14 15 47 49 70
    assignment_operator (61)
        on left: 48
        on right: 47
    expression <expr> (62)
        on left: 49
        on right: 4 8 43 87 89 90 91 92 96
    declaration (63)
        on left: 50
        on right: 85 101 105 106
    init_declarator <symptr> (64)
        on left: 51 52
        on right: 50
    type_specifier (65)
        on left: 53 54 55
        on right: 50 68 69 102
    declarator <symptr> (66)
        on left: 56 57
        on right: 51 52 102
    intermediate_identifier <symptr> (67)
        on left: 58
        on right: 61 62 66 67
    direct_declarator <symptr> (68)
        on left: 59 60 61 62
        on right: 56 57
    pointer <symType> (69)
        on left: 63
        on right: 56 66
    parameter_list (70)
        on left: 64 65
        on right: 61 65
    intermediate_declarator <symptr> (71)
        on left: 66 67
        on right: 68
    parameter_declaration (72)
        on left: 68 69
        on right: 64 65
    initializer <symptr> (73)
        on left: 70
        on right: 52
    statement <stmt> (74)
        on left: 71 72 73 74 75
        on right: 86 89 90
    loop_statement <stmt> (75)
        on left: 76 77 78 79
        on right: 91
    compound_statement <stmt> (76)
        on left: 80
        on right: 71
    block_item_list_opt <stmt> (77)
        on left: 81 82
        on right: 80 92 102
    block_item_list <stmt> (78)
        on left: 83 84
        on right: 81 84
    block_item <stmt> (79)
        on left: 85 86
        on right: 83 84
    expression_statement <expr> (80)
        on left: 87 88
        on right: 72 76 91 92
    selection_statement <stmt> (81)
        on left: 89 90
        on right: 73 77
    iteration_statement <stmt> (82)
        on left: 91 92
        on right: 74 78
    F (83)
        on left: 93
        on right: 91 92
    X (84)
        on left: 94
        on right: 80 91 92
    change_table (85)
        on left: 95
        on right: 61 62 80 91 92 102
    jump_statement <stmt> (86)
        on left: 96 97
        on right: 75 79
    translation_unit (87)
        on left: 98 99
        on right: 0 99
    external_declaration (88)
        on left: 100 101
        on right: 98 99
    function_definition (89)
        on left: 102
        on right: 100
    declaration_list_opt (90)
        on left: 103 104
        on right: 102
    declaration_list (91)
        on left: 105 106
        on right: 103 106


State 0

    0 $accept: . translation_unit $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration           go to state 4
    type_specifier        go to state 5
    translation_unit      go to state 6
    external_declaration  go to state 7
    function_definition   go to state 8


State 1

   54 type_specifier: CHAR .

    $default  reduce using rule 54 (type_specifier)


State 2

   55 type_specifier: INT .

    $default  reduce using rule 55 (type_specifier)


State 3

   53 type_specifier: VOID .

    $default  reduce using rule 53 (type_specifier)


State 4

  101 external_declaration: declaration .

    $default  reduce using rule 101 (external_declaration)


State 5

   50 declaration: type_specifier . init_declarator SEMICOLON
  102 function_definition: type_specifier . declarator declaration_list_opt change_table LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    MULTIPLY    shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    init_declarator          go to state 11
    declarator               go to state 12
    intermediate_identifier  go to state 13
    direct_declarator        go to state 14
    pointer                  go to state 15


State 6

    0 $accept: translation_unit . $end
   99 translation_unit: translation_unit . external_declaration

    $end  shift, and go to state 16
    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration           go to state 4
    type_specifier        go to state 5
    external_declaration  go to state 17
    function_definition   go to state 8


State 7

   98 translation_unit: external_declaration .

    $default  reduce using rule 98 (translation_unit)


State 8

  100 external_declaration: function_definition .

    $default  reduce using rule 100 (external_declaration)


State 9

   63 pointer: MULTIPLY .

    $default  reduce using rule 63 (pointer)


State 10

   58 intermediate_identifier: IDENTIFIER .
   59 direct_declarator: IDENTIFIER .
   60                  | IDENTIFIER . LEFT_SQR_BRACKET INT_CONSTANT RIGHT_SQR_BRACKET

    LEFT_SQR_BRACKET  shift, and go to state 18

    LEFT_PAREN  reduce using rule 58 (intermediate_identifier)
    $default    reduce using rule 59 (direct_declarator)


State 11

   50 declaration: type_specifier init_declarator . SEMICOLON

    SEMICOLON  shift, and go to state 19


State 12

   51 init_declarator: declarator .
   52                | declarator . ASSIGNMENT initializer
  102 function_definition: type_specifier declarator . declaration_list_opt change_table LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    CHAR        shift, and go to state 1
    INT         shift, and go to state 2
    VOID        shift, and go to state 3
    ASSIGNMENT  shift, and go to state 20

    LEFT_CURLY_BRACE  reduce using rule 104 (declaration_list_opt)
    $default          reduce using rule 51 (init_declarator)

    declaration           go to state 21
    type_specifier        go to state 22
    declaration_list_opt  go to state 23
    declaration_list      go to state 24


State 13

   61 direct_declarator: intermediate_identifier . LEFT_PAREN change_table parameter_list RIGHT_PAREN
   62                  | intermediate_identifier . LEFT_PAREN change_table RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 25


State 14

   57 declarator: direct_declarator .

    $default  reduce using rule 57 (declarator)


State 15

   56 declarator: pointer . direct_declarator

    IDENTIFIER  shift, and go to state 10

    intermediate_identifier  go to state 13
    direct_declarator        go to state 26


State 16

    0 $accept: translation_unit $end .

    $default  accept


State 17

   99 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 99 (translation_unit)


State 18

   60 direct_declarator: IDENTIFIER LEFT_SQR_BRACKET . INT_CONSTANT RIGHT_SQR_BRACKET

    INT_CONSTANT  shift, and go to state 27


State 19

   50 declaration: type_specifier init_declarator SEMICOLON .

    $default  reduce using rule 50 (declaration)


State 20

   52 init_declarator: declarator ASSIGNMENT . initializer

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 50
    initializer                go to state 51


State 21

  105 declaration_list: declaration .

    $default  reduce using rule 105 (declaration_list)


State 22

   50 declaration: type_specifier . init_declarator SEMICOLON

    MULTIPLY    shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    init_declarator          go to state 11
    declarator               go to state 52
    intermediate_identifier  go to state 13
    direct_declarator        go to state 14
    pointer                  go to state 15


State 23

  102 function_definition: type_specifier declarator declaration_list_opt . change_table LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 95 (change_table)

    change_table  go to state 53


State 24

  103 declaration_list_opt: declaration_list .
  106 declaration_list: declaration_list . declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 103 (declaration_list_opt)

    declaration     go to state 54
    type_specifier  go to state 22


State 25

   61 direct_declarator: intermediate_identifier LEFT_PAREN . change_table parameter_list RIGHT_PAREN
   62                  | intermediate_identifier LEFT_PAREN . change_table RIGHT_PAREN

    $default  reduce using rule 95 (change_table)

    change_table  go to state 55


State 26

   56 declarator: pointer direct_declarator .

    $default  reduce using rule 56 (declarator)


State 27

   60 direct_declarator: IDENTIFIER LEFT_SQR_BRACKET INT_CONSTANT . RIGHT_SQR_BRACKET

    RIGHT_SQR_BRACKET  shift, and go to state 56


State 28

    4 primary_expression: LEFT_PAREN . expression RIGHT_PAREN

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 58


State 29

   18 unary_operator: BITWISE_AND .

    $default  reduce using rule 18 (unary_operator)


State 30

   19 unary_operator: MULTIPLY .

    $default  reduce using rule 19 (unary_operator)


State 31

   20 unary_operator: ADD .

    $default  reduce using rule 20 (unary_operator)


State 32

   21 unary_operator: SUBTRACT .

    $default  reduce using rule 21 (unary_operator)


State 33

   22 unary_operator: NOT .

    $default  reduce using rule 22 (unary_operator)


State 34

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 35

    5 constant: INT_CONSTANT .

    $default  reduce using rule 5 (constant)


State 36

    6 constant: CHAR_CONSTANT .

    $default  reduce using rule 6 (constant)


State 37

    3 primary_expression: STRING_LITERAL .

    $default  reduce using rule 3 (primary_expression)


State 38

    7 postfix_expression: primary_expression .

    $default  reduce using rule 7 (postfix_expression)


State 39

    2 primary_expression: constant .

    $default  reduce using rule 2 (primary_expression)


State 40

    8 postfix_expression: postfix_expression . LEFT_SQR_BRACKET expression RIGHT_SQR_BRACKET
    9                   | postfix_expression . LEFT_PAREN argument_expression_list_opt RIGHT_PAREN
   10                   | postfix_expression . DOT IDENTIFIER
   11                   | postfix_expression . ARROW IDENTIFIER
   16 unary_expression: postfix_expression .

    LEFT_SQR_BRACKET  shift, and go to state 59
    LEFT_PAREN        shift, and go to state 60
    DOT               shift, and go to state 61
    ARROW             shift, and go to state 62

    $default  reduce using rule 16 (unary_expression)


State 41

   23 multiplicative_expression: unary_expression .
   47 assignment_expression: unary_expression . assignment_operator assignment_expression

    ASSIGNMENT  shift, and go to state 63

    $default  reduce using rule 23 (multiplicative_expression)

    assignment_operator  go to state 64


State 42

   17 unary_expression: unary_operator . unary_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression  go to state 38
    constant            go to state 39
    postfix_expression  go to state 40
    unary_expression    go to state 65
    unary_operator      go to state 42


State 43

   24 multiplicative_expression: multiplicative_expression . MULTIPLY unary_expression
   25                          | multiplicative_expression . DIVIDE unary_expression
   26                          | multiplicative_expression . MODULO unary_expression
   27 additive_expression: multiplicative_expression .

    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    MODULO    shift, and go to state 68

    $default  reduce using rule 27 (additive_expression)


State 44

   28 additive_expression: additive_expression . ADD multiplicative_expression
   29                    | additive_expression . SUBTRACT multiplicative_expression
   30 relational_expression: additive_expression .

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70

    $default  reduce using rule 30 (relational_expression)


State 45

   31 relational_expression: relational_expression . LESS_THAN additive_expression
   32                      | relational_expression . GREATER_THAN additive_expression
   33                      | relational_expression . LESS_THAN_EQUALS additive_expression
   34                      | relational_expression . GREATER_THAN_EQUALS additive_expression
   35 equality_expression: relational_expression .

    LESS_THAN            shift, and go to state 71
    GREATER_THAN         shift, and go to state 72
    LESS_THAN_EQUALS     shift, and go to state 73
    GREATER_THAN_EQUALS  shift, and go to state 74

    $default  reduce using rule 35 (equality_expression)


State 46

   36 equality_expression: equality_expression . EQUALS relational_expression
   37                    | equality_expression . NOT_EQUALS relational_expression
   38 logical_and_expression: equality_expression .

    EQUALS      shift, and go to state 75
    NOT_EQUALS  shift, and go to state 76

    $default  reduce using rule 38 (logical_and_expression)


State 47

   39 logical_and_expression: logical_and_expression . LOGICAL_AND M equality_expression
   40 logical_or_expression: logical_and_expression .

    LOGICAL_AND  shift, and go to state 77

    $default  reduce using rule 40 (logical_or_expression)


State 48

   41 logical_or_expression: logical_or_expression . LOGICAL_OR M logical_and_expression
   42 conditional_expression: logical_or_expression .
   43                       | logical_or_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 78

    QUESTION_MARK  reduce using rule 45 (N)
    $default       reduce using rule 42 (conditional_expression)

    N  go to state 79


State 49

   46 assignment_expression: conditional_expression .

    $default  reduce using rule 46 (assignment_expression)


State 50

   70 initializer: assignment_expression .

    $default  reduce using rule 70 (initializer)


State 51

   52 init_declarator: declarator ASSIGNMENT initializer .

    $default  reduce using rule 52 (init_declarator)


State 52

   51 init_declarator: declarator .
   52                | declarator . ASSIGNMENT initializer

    ASSIGNMENT  shift, and go to state 20

    $default  reduce using rule 51 (init_declarator)


State 53

  102 function_definition: type_specifier declarator declaration_list_opt change_table . LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    LEFT_CURLY_BRACE  shift, and go to state 80


State 54

  106 declaration_list: declaration_list declaration .

    $default  reduce using rule 106 (declaration_list)


State 55

   61 direct_declarator: intermediate_identifier LEFT_PAREN change_table . parameter_list RIGHT_PAREN
   62                  | intermediate_identifier LEFT_PAREN change_table . RIGHT_PAREN

    CHAR         shift, and go to state 1
    INT          shift, and go to state 2
    VOID         shift, and go to state 3
    RIGHT_PAREN  shift, and go to state 81

    type_specifier         go to state 82
    parameter_list         go to state 83
    parameter_declaration  go to state 84


State 56

   60 direct_declarator: IDENTIFIER LEFT_SQR_BRACKET INT_CONSTANT RIGHT_SQR_BRACKET .

    $default  reduce using rule 60 (direct_declarator)


State 57

   49 expression: assignment_expression .

    $default  reduce using rule 49 (expression)


State 58

    4 primary_expression: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 85


State 59

    8 postfix_expression: postfix_expression LEFT_SQR_BRACKET . expression RIGHT_SQR_BRACKET

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 86


State 60

    9 postfix_expression: postfix_expression LEFT_PAREN . argument_expression_list_opt RIGHT_PAREN

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    $default  reduce using rule 13 (argument_expression_list_opt)

    primary_expression            go to state 38
    constant                      go to state 39
    postfix_expression            go to state 40
    argument_expression_list_opt  go to state 87
    argument_expression_list      go to state 88
    unary_expression              go to state 41
    unary_operator                go to state 42
    multiplicative_expression     go to state 43
    additive_expression           go to state 44
    relational_expression         go to state 45
    equality_expression           go to state 46
    logical_and_expression        go to state 47
    logical_or_expression         go to state 48
    conditional_expression        go to state 49
    assignment_expression         go to state 89


State 61

   10 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 90


State 62

   11 postfix_expression: postfix_expression ARROW . IDENTIFIER

    IDENTIFIER  shift, and go to state 91


State 63

   48 assignment_operator: ASSIGNMENT .

    $default  reduce using rule 48 (assignment_operator)


State 64

   47 assignment_expression: unary_expression assignment_operator . assignment_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 92


State 65

   17 unary_expression: unary_operator unary_expression .

    $default  reduce using rule 17 (unary_expression)


State 66

   24 multiplicative_expression: multiplicative_expression MULTIPLY . unary_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression  go to state 38
    constant            go to state 39
    postfix_expression  go to state 40
    unary_expression    go to state 93
    unary_operator      go to state 42


State 67

   25 multiplicative_expression: multiplicative_expression DIVIDE . unary_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression  go to state 38
    constant            go to state 39
    postfix_expression  go to state 40
    unary_expression    go to state 94
    unary_operator      go to state 42


State 68

   26 multiplicative_expression: multiplicative_expression MODULO . unary_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression  go to state 38
    constant            go to state 39
    postfix_expression  go to state 40
    unary_expression    go to state 95
    unary_operator      go to state 42


State 69

   28 additive_expression: additive_expression ADD . multiplicative_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 97


State 70

   29 additive_expression: additive_expression SUBTRACT . multiplicative_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 98


State 71

   31 relational_expression: relational_expression LESS_THAN . additive_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 99


State 72

   32 relational_expression: relational_expression GREATER_THAN . additive_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 100


State 73

   33 relational_expression: relational_expression LESS_THAN_EQUALS . additive_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 101


State 74

   34 relational_expression: relational_expression GREATER_THAN_EQUALS . additive_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 102


State 75

   36 equality_expression: equality_expression EQUALS . relational_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 103


State 76

   37 equality_expression: equality_expression NOT_EQUALS . relational_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 104


State 77

   39 logical_and_expression: logical_and_expression LOGICAL_AND . M equality_expression

    $default  reduce using rule 44 (M)

    M  go to state 105


State 78

   41 logical_or_expression: logical_or_expression LOGICAL_OR . M logical_and_expression

    $default  reduce using rule 44 (M)

    M  go to state 106


State 79

   43 conditional_expression: logical_or_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 107


State 80

  102 function_definition: type_specifier declarator declaration_list_opt change_table LEFT_CURLY_BRACE . block_item_list_opt RIGHT_CURLY_BRACE

    CHAR              shift, and go to state 1
    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    INT               shift, and go to state 2
    RETURN            shift, and go to state 110
    VOID              shift, and go to state 3
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    $default  reduce using rule 82 (block_item_list_opt)

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    declaration                go to state 114
    type_specifier             go to state 22
    statement                  go to state 115
    compound_statement         go to state 116
    block_item_list_opt        go to state 117
    block_item_list            go to state 118
    block_item                 go to state 119
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 81

   62 direct_declarator: intermediate_identifier LEFT_PAREN change_table RIGHT_PAREN .

    $default  reduce using rule 62 (direct_declarator)


State 82

   68 parameter_declaration: type_specifier . intermediate_declarator
   69                      | type_specifier .

    MULTIPLY    shift, and go to state 9
    IDENTIFIER  shift, and go to state 124

    $default  reduce using rule 69 (parameter_declaration)

    intermediate_identifier  go to state 125
    pointer                  go to state 126
    intermediate_declarator  go to state 127


State 83

   61 direct_declarator: intermediate_identifier LEFT_PAREN change_table parameter_list . RIGHT_PAREN
   65 parameter_list: parameter_list . COMMA parameter_declaration

    RIGHT_PAREN  shift, and go to state 128
    COMMA        shift, and go to state 129


State 84

   64 parameter_list: parameter_declaration .

    $default  reduce using rule 64 (parameter_list)


State 85

    4 primary_expression: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 4 (primary_expression)


State 86

    8 postfix_expression: postfix_expression LEFT_SQR_BRACKET expression . RIGHT_SQR_BRACKET

    RIGHT_SQR_BRACKET  shift, and go to state 130


State 87

    9 postfix_expression: postfix_expression LEFT_PAREN argument_expression_list_opt . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 131


State 88

   12 argument_expression_list_opt: argument_expression_list .
   15 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 132

    $default  reduce using rule 12 (argument_expression_list_opt)


State 89

   14 argument_expression_list: assignment_expression .

    $default  reduce using rule 14 (argument_expression_list)


State 90

   10 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 10 (postfix_expression)


State 91

   11 postfix_expression: postfix_expression ARROW IDENTIFIER .

    $default  reduce using rule 11 (postfix_expression)


State 92

   47 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 47 (assignment_expression)


State 93

   24 multiplicative_expression: multiplicative_expression MULTIPLY unary_expression .

    $default  reduce using rule 24 (multiplicative_expression)


State 94

   25 multiplicative_expression: multiplicative_expression DIVIDE unary_expression .

    $default  reduce using rule 25 (multiplicative_expression)


State 95

   26 multiplicative_expression: multiplicative_expression MODULO unary_expression .

    $default  reduce using rule 26 (multiplicative_expression)


State 96

   23 multiplicative_expression: unary_expression .

    $default  reduce using rule 23 (multiplicative_expression)


State 97

   24 multiplicative_expression: multiplicative_expression . MULTIPLY unary_expression
   25                          | multiplicative_expression . DIVIDE unary_expression
   26                          | multiplicative_expression . MODULO unary_expression
   28 additive_expression: additive_expression ADD multiplicative_expression .

    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    MODULO    shift, and go to state 68

    $default  reduce using rule 28 (additive_expression)


State 98

   24 multiplicative_expression: multiplicative_expression . MULTIPLY unary_expression
   25                          | multiplicative_expression . DIVIDE unary_expression
   26                          | multiplicative_expression . MODULO unary_expression
   29 additive_expression: additive_expression SUBTRACT multiplicative_expression .

    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    MODULO    shift, and go to state 68

    $default  reduce using rule 29 (additive_expression)


State 99

   28 additive_expression: additive_expression . ADD multiplicative_expression
   29                    | additive_expression . SUBTRACT multiplicative_expression
   31 relational_expression: relational_expression LESS_THAN additive_expression .

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70

    $default  reduce using rule 31 (relational_expression)


State 100

   28 additive_expression: additive_expression . ADD multiplicative_expression
   29                    | additive_expression . SUBTRACT multiplicative_expression
   32 relational_expression: relational_expression GREATER_THAN additive_expression .

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70

    $default  reduce using rule 32 (relational_expression)


State 101

   28 additive_expression: additive_expression . ADD multiplicative_expression
   29                    | additive_expression . SUBTRACT multiplicative_expression
   33 relational_expression: relational_expression LESS_THAN_EQUALS additive_expression .

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70

    $default  reduce using rule 33 (relational_expression)


State 102

   28 additive_expression: additive_expression . ADD multiplicative_expression
   29                    | additive_expression . SUBTRACT multiplicative_expression
   34 relational_expression: relational_expression GREATER_THAN_EQUALS additive_expression .

    ADD       shift, and go to state 69
    SUBTRACT  shift, and go to state 70

    $default  reduce using rule 34 (relational_expression)


State 103

   31 relational_expression: relational_expression . LESS_THAN additive_expression
   32                      | relational_expression . GREATER_THAN additive_expression
   33                      | relational_expression . LESS_THAN_EQUALS additive_expression
   34                      | relational_expression . GREATER_THAN_EQUALS additive_expression
   36 equality_expression: equality_expression EQUALS relational_expression .

    LESS_THAN            shift, and go to state 71
    GREATER_THAN         shift, and go to state 72
    LESS_THAN_EQUALS     shift, and go to state 73
    GREATER_THAN_EQUALS  shift, and go to state 74

    $default  reduce using rule 36 (equality_expression)


State 104

   31 relational_expression: relational_expression . LESS_THAN additive_expression
   32                      | relational_expression . GREATER_THAN additive_expression
   33                      | relational_expression . LESS_THAN_EQUALS additive_expression
   34                      | relational_expression . GREATER_THAN_EQUALS additive_expression
   37 equality_expression: equality_expression NOT_EQUALS relational_expression .

    LESS_THAN            shift, and go to state 71
    GREATER_THAN         shift, and go to state 72
    LESS_THAN_EQUALS     shift, and go to state 73
    GREATER_THAN_EQUALS  shift, and go to state 74

    $default  reduce using rule 37 (equality_expression)


State 105

   39 logical_and_expression: logical_and_expression LOGICAL_AND M . equality_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 133


State 106

   41 logical_or_expression: logical_or_expression LOGICAL_OR M . logical_and_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 134


State 107

   43 conditional_expression: logical_or_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 44 (M)

    M  go to state 135


State 108

   91 iteration_statement: FOR . F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR . F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 93 (F)

    F  go to state 136


State 109

   89 selection_statement: IF . LEFT_PAREN expression N RIGHT_PAREN M statement N
   90                    | IF . LEFT_PAREN expression N RIGHT_PAREN M statement N ELSE M statement

    LEFT_PAREN  shift, and go to state 137


State 110

   96 jump_statement: RETURN . expression SEMICOLON
   97               | RETURN . SEMICOLON

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    SEMICOLON       shift, and go to state 138
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 139


State 111

   80 compound_statement: LEFT_CURLY_BRACE . X change_table block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 94 (X)

    X  go to state 140


State 112

   88 expression_statement: SEMICOLON .

    $default  reduce using rule 88 (expression_statement)


State 113

   87 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 141


State 114

   85 block_item: declaration .

    $default  reduce using rule 85 (block_item)


State 115

   86 block_item: statement .

    $default  reduce using rule 86 (block_item)


State 116

   71 statement: compound_statement .

    $default  reduce using rule 71 (statement)


State 117

  102 function_definition: type_specifier declarator declaration_list_opt change_table LEFT_CURLY_BRACE block_item_list_opt . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE  shift, and go to state 142


State 118

   81 block_item_list_opt: block_item_list .
   84 block_item_list: block_item_list . M block_item

    RIGHT_CURLY_BRACE  reduce using rule 81 (block_item_list_opt)
    $default           reduce using rule 44 (M)

    M  go to state 143


State 119

   83 block_item_list: block_item .

    $default  reduce using rule 83 (block_item_list)


State 120

   72 statement: expression_statement .

    $default  reduce using rule 72 (statement)


State 121

   73 statement: selection_statement .

    $default  reduce using rule 73 (statement)


State 122

   74 statement: iteration_statement .

    $default  reduce using rule 74 (statement)


State 123

   75 statement: jump_statement .

    $default  reduce using rule 75 (statement)


State 124

   58 intermediate_identifier: IDENTIFIER .

    $default  reduce using rule 58 (intermediate_identifier)


State 125

   67 intermediate_declarator: intermediate_identifier .

    $default  reduce using rule 67 (intermediate_declarator)


State 126

   66 intermediate_declarator: pointer . intermediate_identifier

    IDENTIFIER  shift, and go to state 124

    intermediate_identifier  go to state 144


State 127

   68 parameter_declaration: type_specifier intermediate_declarator .

    $default  reduce using rule 68 (parameter_declaration)


State 128

   61 direct_declarator: intermediate_identifier LEFT_PAREN change_table parameter_list RIGHT_PAREN .

    $default  reduce using rule 61 (direct_declarator)


State 129

   65 parameter_list: parameter_list COMMA . parameter_declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type_specifier         go to state 82
    parameter_declaration  go to state 145


State 130

    8 postfix_expression: postfix_expression LEFT_SQR_BRACKET expression RIGHT_SQR_BRACKET .

    $default  reduce using rule 8 (postfix_expression)


State 131

    9 postfix_expression: postfix_expression LEFT_PAREN argument_expression_list_opt RIGHT_PAREN .

    $default  reduce using rule 9 (postfix_expression)


State 132

   15 argument_expression_list: argument_expression_list COMMA . assignment_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 146


State 133

   36 equality_expression: equality_expression . EQUALS relational_expression
   37                    | equality_expression . NOT_EQUALS relational_expression
   39 logical_and_expression: logical_and_expression LOGICAL_AND M equality_expression .

    EQUALS      shift, and go to state 75
    NOT_EQUALS  shift, and go to state 76

    $default  reduce using rule 39 (logical_and_expression)


State 134

   39 logical_and_expression: logical_and_expression . LOGICAL_AND M equality_expression
   41 logical_or_expression: logical_or_expression LOGICAL_OR M logical_and_expression .

    LOGICAL_AND  shift, and go to state 77

    $default  reduce using rule 41 (logical_or_expression)


State 135

   43 conditional_expression: logical_or_expression N QUESTION_MARK M . expression N COLON M conditional_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 147


State 136

   91 iteration_statement: FOR F . LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F . LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    LEFT_PAREN  shift, and go to state 148


State 137

   89 selection_statement: IF LEFT_PAREN . expression N RIGHT_PAREN M statement N
   90                    | IF LEFT_PAREN . expression N RIGHT_PAREN M statement N ELSE M statement

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 149


State 138

   97 jump_statement: RETURN SEMICOLON .

    $default  reduce using rule 97 (jump_statement)


State 139

   96 jump_statement: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 150


State 140

   80 compound_statement: LEFT_CURLY_BRACE X . change_table block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 95 (change_table)

    change_table  go to state 151


State 141

   87 expression_statement: expression SEMICOLON .

    $default  reduce using rule 87 (expression_statement)


State 142

  102 function_definition: type_specifier declarator declaration_list_opt change_table LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE .

    $default  reduce using rule 102 (function_definition)


State 143

   84 block_item_list: block_item_list M . block_item

    CHAR              shift, and go to state 1
    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    INT               shift, and go to state 2
    RETURN            shift, and go to state 110
    VOID              shift, and go to state 3
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    declaration                go to state 114
    type_specifier             go to state 22
    statement                  go to state 115
    compound_statement         go to state 116
    block_item                 go to state 152
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 144

   66 intermediate_declarator: pointer intermediate_identifier .

    $default  reduce using rule 66 (intermediate_declarator)


State 145

   65 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 65 (parameter_list)


State 146

   15 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 15 (argument_expression_list)


State 147

   43 conditional_expression: logical_or_expression N QUESTION_MARK M expression . N COLON M conditional_expression

    $default  reduce using rule 45 (N)

    N  go to state 153


State 148

   91 iteration_statement: FOR F LEFT_PAREN . X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN . X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 94 (X)

    X  go to state 154


State 149

   89 selection_statement: IF LEFT_PAREN expression . N RIGHT_PAREN M statement N
   90                    | IF LEFT_PAREN expression . N RIGHT_PAREN M statement N ELSE M statement

    $default  reduce using rule 45 (N)

    N  go to state 155


State 150

   96 jump_statement: RETURN expression SEMICOLON .

    $default  reduce using rule 96 (jump_statement)


State 151

   80 compound_statement: LEFT_CURLY_BRACE X change_table . block_item_list_opt RIGHT_CURLY_BRACE

    CHAR              shift, and go to state 1
    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    INT               shift, and go to state 2
    RETURN            shift, and go to state 110
    VOID              shift, and go to state 3
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    $default  reduce using rule 82 (block_item_list_opt)

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    declaration                go to state 114
    type_specifier             go to state 22
    statement                  go to state 115
    compound_statement         go to state 116
    block_item_list_opt        go to state 156
    block_item_list            go to state 118
    block_item                 go to state 119
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 152

   84 block_item_list: block_item_list M block_item .

    $default  reduce using rule 84 (block_item_list)


State 153

   43 conditional_expression: logical_or_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 157


State 154

   91 iteration_statement: FOR F LEFT_PAREN X . change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X . change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 95 (change_table)

    change_table  go to state 158


State 155

   89 selection_statement: IF LEFT_PAREN expression N . RIGHT_PAREN M statement N
   90                    | IF LEFT_PAREN expression N . RIGHT_PAREN M statement N ELSE M statement

    RIGHT_PAREN  shift, and go to state 159


State 156

   80 compound_statement: LEFT_CURLY_BRACE X change_table block_item_list_opt . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE  shift, and go to state 160


State 157

   43 conditional_expression: logical_or_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 44 (M)

    M  go to state 161


State 158

   91 iteration_statement: FOR F LEFT_PAREN X change_table . expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table . expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    SEMICOLON       shift, and go to state 112
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    expression_statement       go to state 162


State 159

   89 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN . M statement N
   90                    | IF LEFT_PAREN expression N RIGHT_PAREN . M statement N ELSE M statement

    $default  reduce using rule 44 (M)

    M  go to state 163


State 160

   80 compound_statement: LEFT_CURLY_BRACE X change_table block_item_list_opt RIGHT_CURLY_BRACE .

    $default  reduce using rule 80 (compound_statement)


State 161

   43 conditional_expression: logical_or_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 96
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 164


State 162

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement . M expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement . M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 44 (M)

    M  go to state 165


State 163

   89 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M . statement N
   90                    | IF LEFT_PAREN expression N RIGHT_PAREN M . statement N ELSE M statement

    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    RETURN            shift, and go to state 110
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    statement                  go to state 166
    compound_statement         go to state 116
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 164

   43 conditional_expression: logical_or_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 43 (conditional_expression)


State 165

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M . expression_statement M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M . expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    SEMICOLON       shift, and go to state 112
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    expression_statement       go to state 167


State 166

   89 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement . N
   90                    | IF LEFT_PAREN expression N RIGHT_PAREN M statement . N ELSE M statement

    $default  reduce using rule 45 (N)

    N  go to state 168


State 167

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement . M expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement . M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 44 (M)

    M  go to state 169


State 168

   89 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement N .
   90                    | IF LEFT_PAREN expression N RIGHT_PAREN M statement N . ELSE M statement

    ELSE  shift, and go to state 170

    $default  reduce using rule 89 (selection_statement)


State 169

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M . expression N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M . expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    LEFT_PAREN      shift, and go to state 28
    BITWISE_AND     shift, and go to state 29
    MULTIPLY        shift, and go to state 30
    ADD             shift, and go to state 31
    SUBTRACT        shift, and go to state 32
    NOT             shift, and go to state 33
    IDENTIFIER      shift, and go to state 34
    INT_CONSTANT    shift, and go to state 35
    CHAR_CONSTANT   shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 171


State 170

   90 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement N ELSE . M statement

    $default  reduce using rule 44 (M)

    M  go to state 172


State 171

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression . N RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression . N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 45 (N)

    N  go to state 173


State 172

   90 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement N ELSE M . statement

    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    RETURN            shift, and go to state 110
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    statement                  go to state 174
    compound_statement         go to state 116
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 173

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N . RIGHT_PAREN M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N . RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    RIGHT_PAREN  shift, and go to state 175


State 174

   90 selection_statement: IF LEFT_PAREN expression N RIGHT_PAREN M statement N ELSE M statement .

    $default  reduce using rule 90 (selection_statement)


State 175

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN . M loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN . M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    $default  reduce using rule 44 (M)

    M  go to state 176


State 176

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M . loop_statement
   92                    | FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M . LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE

    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    RETURN            shift, and go to state 110
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 177
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    loop_statement             go to state 178
    expression_statement       go to state 179
    selection_statement        go to state 180
    iteration_statement        go to state 181
    jump_statement             go to state 182


State 177

   92 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE . block_item_list_opt RIGHT_CURLY_BRACE

    CHAR              shift, and go to state 1
    FOR               shift, and go to state 108
    IF                shift, and go to state 109
    INT               shift, and go to state 2
    RETURN            shift, and go to state 110
    VOID              shift, and go to state 3
    LEFT_PAREN        shift, and go to state 28
    LEFT_CURLY_BRACE  shift, and go to state 111
    BITWISE_AND       shift, and go to state 29
    MULTIPLY          shift, and go to state 30
    ADD               shift, and go to state 31
    SUBTRACT          shift, and go to state 32
    NOT               shift, and go to state 33
    SEMICOLON         shift, and go to state 112
    IDENTIFIER        shift, and go to state 34
    INT_CONSTANT      shift, and go to state 35
    CHAR_CONSTANT     shift, and go to state 36
    STRING_LITERAL    shift, and go to state 37

    $default  reduce using rule 82 (block_item_list_opt)

    primary_expression         go to state 38
    constant                   go to state 39
    postfix_expression         go to state 40
    unary_expression           go to state 41
    unary_operator             go to state 42
    multiplicative_expression  go to state 43
    additive_expression        go to state 44
    relational_expression      go to state 45
    equality_expression        go to state 46
    logical_and_expression     go to state 47
    logical_or_expression      go to state 48
    conditional_expression     go to state 49
    assignment_expression      go to state 57
    expression                 go to state 113
    declaration                go to state 114
    type_specifier             go to state 22
    statement                  go to state 115
    compound_statement         go to state 116
    block_item_list_opt        go to state 183
    block_item_list            go to state 118
    block_item                 go to state 119
    expression_statement       go to state 120
    selection_statement        go to state 121
    iteration_statement        go to state 122
    jump_statement             go to state 123


State 178

   91 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M loop_statement .

    $default  reduce using rule 91 (iteration_statement)


State 179

   76 loop_statement: expression_statement .

    $default  reduce using rule 76 (loop_statement)


State 180

   77 loop_statement: selection_statement .

    $default  reduce using rule 77 (loop_statement)


State 181

   78 loop_statement: iteration_statement .

    $default  reduce using rule 78 (loop_statement)


State 182

   79 loop_statement: jump_statement .

    $default  reduce using rule 79 (loop_statement)


State 183

   92 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt . RIGHT_CURLY_BRACE

    RIGHT_CURLY_BRACE  shift, and go to state 184


State 184

   92 iteration_statement: FOR F LEFT_PAREN X change_table expression_statement M expression_statement M expression N RIGHT_PAREN M LEFT_CURLY_BRACE block_item_list_opt RIGHT_CURLY_BRACE .

    $default  reduce using rule 92 (iteration_statement)
